#!/usr/bin/env python
"""
This module has a custom doctest runner that supports flags for skipping
doctests in certain Python versions. The flags

SKIP35
SKIP36
SKIP37

will skip the doctests in those Python versions. Use them like

>>> import sys
>>> print(sys.version_info[:2]) # doctest: +SKIP36, +SKIP37
(3, 5)

As an additional feature, it automatically ignores ``` at the end of a
doctest, preventing the need to add an empty line to the end of every doctest
in Markdown.

This also automatically makes some replacements to text to allow testing to be
uniform in Python 3.5, 3.6, and 3.7 due to some token number changes (for
instance, tokenize.ENCODING is 59 in Python 3.5/3.6 and 57 in Python 3.7).
That way we can just write the output as it appears in Python 3.7 without
using ellipses or skipping in 3.5/3.6.

WARNING: This file registers these flags globally in the standard library
doctest module and monkeypatches the DoctestRunner object. It should only be
run as a standalone script. Do not attempt to import it.

"""

import sys
import warnings
import glob
from doctest import DocTestRunner, register_optionflag, _test

SKIP35 = register_optionflag("SKIP35")
SKIP36 = register_optionflag("SKIP36")
SKIP37 = register_optionflag("SKIP37")
SKIP38 = register_optionflag("SKIP38")

PY37 = sys.version_info[1] >= 7
PY38 = sys.version_info[1] >= 8

if sys.version_info[1] == 5:
    SKIP_THIS_VERSION = SKIP35
elif sys.version_info[1] == 6:
    SKIP_THIS_VERSION = SKIP36
elif sys.version_info[1] == 7:
    SKIP_THIS_VERSION = SKIP37
elif sys.version_info[1] == 8:
    SKIP_THIS_VERSION = SKIP38
else:
    warnings.warn("Unrecognized Python version: %s.%s" % sys.version_info[:2])
    SKIP_THIS_VERSION = SKIP38

orig_run = DocTestRunner.run

token_38_to_36 = {
    'type=62 (ENCODING)': 'type=59 (ENCODING)',
    'type=59 (ERRORTOKEN)': 'type=56 (ERRORTOKEN)',
    'type=61 (NL)': 'type=58 (NL)',
    'type=60 (COMMENT)': 'type=57 (COMMENT)',
    'type=54 (OP)': 'type=53 (OP)',

    # TokenInfo doctests in usage.md
    'toknum: 62': 'toknum: 59',
    'toknum: 54': 'toknum: 53',
    'type: 62': 'type: 59',
    'type: 54': 'type: 53',
}

token_38_to_37 = {
    'type=62 (ENCODING)': 'type=57 (ENCODING)',
    'type=59 (ERRORTOKEN)': 'type=54 (ERRORTOKEN)',
    'type=61 (NL)': 'type=56 (NL)',
    'type=60 (COMMENT)': 'type=55 (COMMENT)',
    'type=54 (OP)': 'type=53 (OP)',

    # TokenInfo doctests in usage.md
    'toknum: 62': 'toknum: 57',
    'toknum: 54': 'toknum: 53',
    'type: 62': 'type: 57',
    'type: 54': 'type: 53',
}

def run(self, test, **kwargs):
    filtered_examples = []
    for example in test.examples:
        if SKIP_THIS_VERSION not in example.options:
            # Remove ```
            example.want = example.want.replace('```\n', '')
            example.exc_msg = example.exc_msg and example.exc_msg.replace('```\n', '')

            # All doctest output should be as in Python 3.8, unless it is
            # skipped in 3.8
            if not PY38 and SKIP38 not in example.options:
                if PY37:
                    repl = token_38_to_37
                else:
                    repl = token_38_to_36
                for old, new in repl.items():
                    example.want = example.want.replace(old, new)

            filtered_examples.append(example)
    test.examples = filtered_examples

    orig_run(self, test, **kwargs)

DocTestRunner.run = run

if __name__ == '__main__':
    if len(sys.argv) == 1:
        sys.argv.extend(glob.glob('*.md'))
    sys.exit(_test())
else:
    warnings.warn("Importing run_doctests is not recommended.")
